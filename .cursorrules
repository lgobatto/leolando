# üéØ Cursor Rules - Leolando WordPress Project

## üìã Project Overview
This is a WordPress development environment using Lando, with a complete DevOps pipeline including GitFlow, Conventional Commits, and CI/CD.

## üèóÔ∏è Architecture
- **WordPress**: Core CMS
- **Lando**: Development environment with Docker
- **PHP**: 8.2+ with Xdebug
- **Node.js**: 18+ for DevOps tools
- **MySQL**: Database
- **Redis**: Caching
- **Nginx**: Web server

## üìù Code Style & Standards

### Conventional Commits
ALWAYS follow Conventional Commits format for any commit messages:

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

**Required Types:**
- `feat`: New feature
- `fix`: Bug fix
- `docs`: Documentation
- `style`: Formatting, missing semicolons, etc.
- `refactor`: Code refactoring
- `perf`: Performance improvements
- `test`: Adding or updating tests
- `build`: Build system or external dependencies
- `ci`: CI/CD changes
- `chore`: Maintenance tasks
- `revert`: Revert previous commit
- `wip`: Work in progress
- `hotfix`: Critical production fix

**Common Scopes:**
- `auth`: Authentication related
- `api`: API changes
- `ui`: User interface
- `db`: Database changes
- `config`: Configuration files
- `docs`: Documentation
- `tests`: Test files
- `ci`: CI/CD pipeline
- `build`: Build process
- `deploy`: Deployment
- `security`: Security improvements
- `performance`: Performance optimizations
- `wordpress`: WordPress core/plugins/themes
- `lando`: Lando environment

**Examples:**
- `feat(auth): add OAuth2 authentication`
- `fix(validation): correct email validation`
- `docs: update installation instructions`
- `refactor(database): optimize database queries`
- `hotfix: fix critical security vulnerability`

### PHP Standards
- Follow PSR-12 coding standards
- Use type hints where possible
- Add proper PHPDoc comments
- Use WordPress coding standards for WordPress-specific code

### JavaScript/TypeScript Standards
- Use ES6+ features
- Follow Airbnb style guide
- Use TypeScript when possible
- Add JSDoc comments for functions

## üîß Development Workflow

### GitFlow Process
1. **Features**: Create from `develop` branch
2. **Releases**: Create from `develop` branch
3. **Hotfixes**: Create from `master/main` branch
4. **Commits**: Always use Conventional Commits format

### Lando Commands
- Use `lando` prefix for all development commands
- Node.js tools run via `lando npm`
- PHP tools run via `lando composer`
- WordPress CLI via `lando wp`

### Commit Process
1. Stage changes: `git add .`
2. Use interactive commit: `lando npm run commit`
3. Or use Cursor's "Generate commit message" feature
4. Ensure commit follows Conventional Commits format

## üöÄ AI Assistant Guidelines

### When Generating Commit Messages
- ALWAYS use Conventional Commits format
- Analyze the changes to determine the correct type
- Use appropriate scope if applicable
- Keep description concise and in imperative mood
- Use present tense: "add" not "added" or "adds"

### When Writing Code
- Follow WordPress best practices for WordPress code
- Use Lando environment for all tooling
- Include proper error handling
- Add comments for complex logic
- Consider security implications

### When Suggesting Changes
- Prioritize maintainability and readability
- Consider performance implications
- Follow established patterns in the codebase
- Suggest improvements that align with project goals

## üõ°Ô∏è Security Considerations
- Always validate and sanitize user input
- Use WordPress nonces for forms
- Follow WordPress security best practices
- Consider SQL injection prevention
- Implement proper authentication checks

## üìö Documentation
- Update README.md for significant changes
- Add inline comments for complex logic
- Document API changes
- Update changelog for releases

## üéØ Project Goals
- Maintain high code quality
- Follow WordPress and PHP best practices
- Ensure smooth development workflow
- Keep documentation up to date
- Maintain security standards

Remember: This is a WordPress project with a complete DevOps pipeline. Always consider the WordPress ecosystem and Lando environment when making suggestions or generating code.